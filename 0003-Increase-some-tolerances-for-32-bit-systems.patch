From 10e4a0fbcab2ad59b95e1391d3285aff07e1f473 Mon Sep 17 00:00:00 2001
From: Elliott Sales de Andrade <quantum.analyst@gmail.com>
Date: Sat, 31 Mar 2018 00:15:14 -0400
Subject: [PATCH 3/3] Increase some tolerances for 32-bit systems.

Signed-off-by: Elliott Sales de Andrade <quantum.analyst@gmail.com>
---
 lib/matplotlib/testing/decorators.py               |  2 +-
 lib/matplotlib/tests/test_artist.py                |  3 +-
 lib/matplotlib/tests/test_axes.py                  | 47 +++++++++++-----------
 lib/matplotlib/tests/test_collections.py           |  2 +-
 lib/matplotlib/tests/test_colorbar.py              | 11 ++---
 lib/matplotlib/tests/test_constrainedlayout.py     |  2 +-
 lib/matplotlib/tests/test_contour.py               |  6 +--
 lib/matplotlib/tests/test_image.py                 |  2 +-
 lib/matplotlib/tests/test_mathtext.py              |  4 +-
 lib/matplotlib/tests/test_patches.py               |  3 +-
 lib/matplotlib/tests/test_patheffects.py           |  2 +-
 lib/matplotlib/tests/test_pickle.py                |  2 +-
 lib/matplotlib/tests/test_quiver.py                |  2 +-
 lib/matplotlib/tests/test_streamplot.py            |  3 +-
 lib/matplotlib/tests/test_transforms.py            |  2 +-
 .../tests/test_axisartist_floating_axes.py         |  4 +-
 .../test_axisartist_grid_helper_curvelinear.py     |  4 +-
 lib/mpl_toolkits/tests/test_mplot3d.py             |  4 +-
 18 files changed, 52 insertions(+), 53 deletions(-)

diff --git a/lib/matplotlib/testing/decorators.py b/lib/matplotlib/testing/decorators.py
index 0ce6e6252..9a80eec1a 100644
--- a/lib/matplotlib/testing/decorators.py
+++ b/lib/matplotlib/testing/decorators.py
@@ -408,7 +408,7 @@ def _pytest_image_comparison(baseline_images, extensions, tol,
     return decorator
 
 
-def image_comparison(baseline_images, extensions=None, tol=0,
+def image_comparison(baseline_images, extensions=None, tol=0.1,
                      freetype_version=None, remove_text=False,
                      savefig_kwarg=None,
                      # Default of mpl_test_settings fixture and cleanup too.
diff --git a/lib/matplotlib/tests/test_artist.py b/lib/matplotlib/tests/test_artist.py
index 8d1a01294..02acbb206 100644
--- a/lib/matplotlib/tests/test_artist.py
+++ b/lib/matplotlib/tests/test_artist.py
@@ -96,7 +96,8 @@ def test_collection_transform_of_none():
     assert isinstance(c._transOffset, mtransforms.IdentityTransform)
 
 
-@image_comparison(baseline_images=["clip_path_clipping"], remove_text=True)
+@image_comparison(baseline_images=["clip_path_clipping"], remove_text=True,
+                  tol=0.28)
 def test_clipping():
     exterior = mpath.Path.unit_rectangle().deepcopy()
     exterior.vertices *= 4
diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py
index 77ec92b01..f16e70cfd 100644
--- a/lib/matplotlib/tests/test_axes.py
+++ b/lib/matplotlib/tests/test_axes.py
@@ -523,7 +523,7 @@ def test_single_point():
     plt.plot('b', 'b', 'o', data=data)
 
 
-@image_comparison(baseline_images=['single_date'])
+@image_comparison(baseline_images=['single_date'], tol=1.97)
 def test_single_date():
     time1 = [721964.0]
     data1 = [-65.54]
@@ -707,8 +707,7 @@ def test_polar_rlabel_position():
     ax.tick_params(rotation='auto')
 
 
-@image_comparison(baseline_images=['polar_theta_wedge'], style='default',
-                  tol=0.01 if six.PY2 else 0)
+@image_comparison(baseline_images=['polar_theta_wedge'], style='default')
 def test_polar_theta_limits():
     r = np.arange(0, 3.0, 0.01)
     theta = 2*np.pi*r
@@ -1008,7 +1007,7 @@ def test_fill_between_interpolate():
 
 
 @image_comparison(baseline_images=['fill_between_interpolate_decreasing'],
-                  style='mpl20', remove_text=True)
+                  style='mpl20', remove_text=True, tol=0.78)
 def test_fill_between_interpolate_decreasing():
     p = np.array([724.3, 700, 655])
     t = np.array([9.4, 7, 2.2])
@@ -1122,7 +1121,7 @@ def test_pcolormesh():
 
 
 @image_comparison(baseline_images=['pcolormesh_datetime_axis'],
-                  extensions=['png'], remove_text=False)
+                  extensions=['png'], remove_text=False, tol=0.19)
 def test_pcolormesh_datetime_axis():
     fig = plt.figure()
     fig.subplots_adjust(hspace=0.4, top=0.98, bottom=.15)
@@ -1148,7 +1147,7 @@ def test_pcolormesh_datetime_axis():
 
 
 @image_comparison(baseline_images=['pcolor_datetime_axis'],
-                  extensions=['png'], remove_text=False)
+                  extensions=['png'], remove_text=False, tol=0.19)
 def test_pcolor_datetime_axis():
     fig = plt.figure()
     fig.subplots_adjust(hspace=0.4, top=0.98, bottom=.15)
@@ -1205,7 +1204,7 @@ def test_canonical():
 
 
 @image_comparison(baseline_images=['arc_angles'], remove_text=True,
-                  style='default', extensions=['png'])
+                  style='default', extensions=['png'], tol=0.17)
 def test_arc_angles():
     from matplotlib import patches
     # Ellipse parameters
@@ -2467,7 +2466,7 @@ def test_boxplot_mod_artist_after_plotting():
 
 @image_comparison(baseline_images=['violinplot_vert_baseline',
                                    'violinplot_vert_baseline'],
-                  extensions=['png'])
+                  extensions=['png'], tol=0.24)
 def test_vert_violinplot_baseline():
     # First 9 digits of frac(sqrt(2))
     np.random.seed(414213562)
@@ -2485,7 +2484,7 @@ def test_vert_violinplot_baseline():
 
 
 @image_comparison(baseline_images=['violinplot_vert_showmeans'],
-                  extensions=['png'])
+                  extensions=['png'], tol=0.23)
 def test_vert_violinplot_showmeans():
     ax = plt.axes()
     # First 9 digits of frac(sqrt(3))
@@ -2496,7 +2495,7 @@ def test_vert_violinplot_showmeans():
 
 
 @image_comparison(baseline_images=['violinplot_vert_showextrema'],
-                  extensions=['png'])
+                  extensions=['png'], tol=0.23)
 def test_vert_violinplot_showextrema():
     ax = plt.axes()
     # First 9 digits of frac(sqrt(5))
@@ -2507,7 +2506,7 @@ def test_vert_violinplot_showextrema():
 
 
 @image_comparison(baseline_images=['violinplot_vert_showmedians'],
-                  extensions=['png'])
+                  extensions=['png'], tol=0.23)
 def test_vert_violinplot_showmedians():
     ax = plt.axes()
     # First 9 digits of frac(sqrt(7))
@@ -2518,7 +2517,7 @@ def test_vert_violinplot_showmedians():
 
 
 @image_comparison(baseline_images=['violinplot_vert_showall'],
-                  extensions=['png'])
+                  extensions=['png'], tol=0.2)
 def test_vert_violinplot_showall():
     ax = plt.axes()
     # First 9 digits of frac(sqrt(11))
@@ -2529,7 +2528,7 @@ def test_vert_violinplot_showall():
 
 
 @image_comparison(baseline_images=['violinplot_vert_custompoints_10'],
-                  extensions=['png'])
+                  extensions=['png'], tol=0.22)
 def test_vert_violinplot_custompoints_10():
     ax = plt.axes()
     # First 9 digits of frac(sqrt(13))
@@ -2540,7 +2539,7 @@ def test_vert_violinplot_custompoints_10():
 
 
 @image_comparison(baseline_images=['violinplot_vert_custompoints_200'],
-                  extensions=['png'])
+                  extensions=['png'], tol=0.22)
 def test_vert_violinplot_custompoints_200():
     ax = plt.axes()
     # First 9 digits of frac(sqrt(17))
@@ -2551,7 +2550,7 @@ def test_vert_violinplot_custompoints_200():
 
 
 @image_comparison(baseline_images=['violinplot_horiz_baseline'],
-                  extensions=['png'])
+                  extensions=['png'], tol=0.2)
 def test_horiz_violinplot_baseline():
     ax = plt.axes()
     # First 9 digits of frac(sqrt(19))
@@ -2562,7 +2561,7 @@ def test_horiz_violinplot_baseline():
 
 
 @image_comparison(baseline_images=['violinplot_horiz_showmedians'],
-                  extensions=['png'])
+                  extensions=['png'], tol=0.23)
 def test_horiz_violinplot_showmedians():
     ax = plt.axes()
     # First 9 digits of frac(sqrt(23))
@@ -2573,7 +2572,7 @@ def test_horiz_violinplot_showmedians():
 
 
 @image_comparison(baseline_images=['violinplot_horiz_showmeans'],
-                  extensions=['png'])
+                  extensions=['png'], tol=0.25)
 def test_horiz_violinplot_showmeans():
     ax = plt.axes()
     # First 9 digits of frac(sqrt(29))
@@ -2584,7 +2583,7 @@ def test_horiz_violinplot_showmeans():
 
 
 @image_comparison(baseline_images=['violinplot_horiz_showextrema'],
-                  extensions=['png'])
+                  extensions=['png'], tol=0.2)
 def test_horiz_violinplot_showextrema():
     ax = plt.axes()
     # First 9 digits of frac(sqrt(31))
@@ -2595,7 +2594,7 @@ def test_horiz_violinplot_showextrema():
 
 
 @image_comparison(baseline_images=['violinplot_horiz_showall'],
-                  extensions=['png'])
+                  extensions=['png'], tol=0.19)
 def test_horiz_violinplot_showall():
     ax = plt.axes()
     # First 9 digits of frac(sqrt(37))
@@ -2606,7 +2605,7 @@ def test_horiz_violinplot_showall():
 
 
 @image_comparison(baseline_images=['violinplot_horiz_custompoints_10'],
-                  extensions=['png'])
+                  extensions=['png'], tol=0.22)
 def test_horiz_violinplot_custompoints_10():
     ax = plt.axes()
     # First 9 digits of frac(sqrt(41))
@@ -2617,7 +2616,7 @@ def test_horiz_violinplot_custompoints_10():
 
 
 @image_comparison(baseline_images=['violinplot_horiz_custompoints_200'],
-                  extensions=['png'])
+                  extensions=['png'], tol=0.22)
 def test_horiz_violinplot_custompoints_200():
     ax = plt.axes()
     # First 9 digits of frac(sqrt(43))
@@ -3964,7 +3963,7 @@ def test_psd_noise():
 
 
 @image_comparison(baseline_images=['csd_freqs'], remove_text=True,
-                  extensions=['png'])
+                  extensions=['png'], tol=0.21)
 def test_csd_freqs():
     '''test axes.csd with sinusoidal stimuli'''
     n = 10000
@@ -4823,7 +4822,7 @@ def test_rc_spines():
 
 
 @image_comparison(baseline_images=['rc_grid'], extensions=['png'],
-                  savefig_kwarg={'dpi': 40})
+                  savefig_kwarg={'dpi': 40}, tol=0.2)
 def test_rc_grid():
     fig = plt.figure()
     rc_dict0 = {
@@ -5318,7 +5317,7 @@ def test_date_timezone_y():
 
 
 @image_comparison(baseline_images=['date_timezone_x_and_y'],
-                  extensions=['png'])
+                  extensions=['png'], tol=3.05)
 def test_date_timezone_x_and_y():
     # Tests issue 5575
     time_index = [pytz.timezone('UTC').localize(datetime.datetime(
diff --git a/lib/matplotlib/tests/test_collections.py b/lib/matplotlib/tests/test_collections.py
index 291647d17..265f23fed 100644
--- a/lib/matplotlib/tests/test_collections.py
+++ b/lib/matplotlib/tests/test_collections.py
@@ -467,7 +467,7 @@ def test_EllipseCollection():
 
 
 @image_comparison(baseline_images=['polycollection_close'],
-                  extensions=['png'], remove_text=True)
+                  extensions=['png'], remove_text=True, tol=0.45)
 def test_polycollection_close():
     from mpl_toolkits.mplot3d import Axes3D
 
diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py
index 539ee8c83..ae21e723f 100644
--- a/lib/matplotlib/tests/test_colorbar.py
+++ b/lib/matplotlib/tests/test_colorbar.py
@@ -95,7 +95,7 @@ def _colorbar_extension_length(spacing):
 @image_comparison(
         baseline_images=['colorbar_extensions_shape_uniform',
                          'colorbar_extensions_shape_proportional'],
-        extensions=['png'])
+        extensions=['png'], tol=0.16)
 def test_colorbar_extension_shape():
     '''Test rectangular colorbar extensions.'''
     # Create figures for uniform and proportionally spaced colorbars.
@@ -105,7 +105,7 @@ def test_colorbar_extension_shape():
 
 @image_comparison(baseline_images=['colorbar_extensions_uniform',
                                    'colorbar_extensions_proportional'],
-                  extensions=['png'])
+                  extensions=['png'], tol=0.25)
 def test_colorbar_extension_length():
     '''Test variable length colorbar extensions.'''
     # Create figures for uniform and proportionally spaced colorbars.
@@ -119,7 +119,7 @@ def test_colorbar_extension_length():
                                    'cbar_sharing',
                                    ],
                   extensions=['png'], remove_text=True,
-                  savefig_kwarg={'dpi': 40})
+                  savefig_kwarg={'dpi': 40}, tol=0.17)
 def test_colorbar_positioning():
     data = np.arange(1200).reshape(30, 40)
     levels = [0, 200, 400, 600, 800, 1000, 1200]
@@ -173,7 +173,7 @@ def test_colorbar_positioning():
 
 @image_comparison(baseline_images=['cbar_with_subplots_adjust'],
                   extensions=['png'], remove_text=True,
-                  savefig_kwarg={'dpi': 40})
+                  savefig_kwarg={'dpi': 40}, tol=0.17)
 def test_gridspec_make_colorbar():
     plt.figure()
     data = np.arange(1200).reshape(30, 40)
@@ -233,7 +233,8 @@ def test_colorbarbase():
 
 @image_comparison(
     baseline_images=['colorbar_closed_patch'],
-    remove_text=True)
+    remove_text=True,
+    tol=0.22)
 def test_colorbar_closed_patch():
     fig = plt.figure(figsize=(8, 6))
     ax1 = fig.add_axes([0.05, 0.85, 0.9, 0.1])
diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py
index 9c36fb247..929e38bd8 100644
--- a/lib/matplotlib/tests/test_constrainedlayout.py
+++ b/lib/matplotlib/tests/test_constrainedlayout.py
@@ -296,7 +296,7 @@ def test_constrained_layout12():
     ax.set_xlabel('x-label')
 
 
-@image_comparison(baseline_images=['constrained_layout13'], tol=2.e-2,
+@image_comparison(baseline_images=['constrained_layout13'], tol=3.e-2,
         extensions=['png'])
 def test_constrained_layout13():
     'Test that padding works.'
diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py
index 35d33b972..f10483ce4 100644
--- a/lib/matplotlib/tests/test_contour.py
+++ b/lib/matplotlib/tests/test_contour.py
@@ -225,7 +225,7 @@ def test_given_colors_levels_and_extends():
 
 
 @image_comparison(baseline_images=['contour_datetime_axis'],
-                  extensions=['png'], remove_text=False)
+                  extensions=['png'], remove_text=False, tol=0.18)
 def test_contour_datetime_axis():
     fig = plt.figure()
     fig.subplots_adjust(hspace=0.4, top=0.98, bottom=.15)
@@ -251,7 +251,7 @@ def test_contour_datetime_axis():
 
 
 @image_comparison(baseline_images=['contour_test_label_transforms'],
-                  extensions=['png'], remove_text=True)
+                  extensions=['png'], remove_text=True, tol=1.38)
 def test_labels():
     # Adapted from pylab_examples example code: contour_demo.py
     # see issues #2475, #2843, and #2818 for explanation
@@ -282,7 +282,7 @@ def test_labels():
 
 @image_comparison(baseline_images=['contour_corner_mask_False',
                                    'contour_corner_mask_True'],
-                  extensions=['png'], remove_text=True)
+                  extensions=['png'], remove_text=True, tol=0.19)
 def test_corner_mask():
     n = 60
     mask_level = 0.95
diff --git a/lib/matplotlib/tests/test_image.py b/lib/matplotlib/tests/test_image.py
index 26e3b4a7e..269f814bb 100644
--- a/lib/matplotlib/tests/test_image.py
+++ b/lib/matplotlib/tests/test_image.py
@@ -784,7 +784,7 @@ def test_imshow_endianess():
 
 
 @image_comparison(baseline_images=['imshow_masked_interpolation'],
-                  remove_text=True, style='mpl20')
+                  remove_text=True, style='mpl20', tol=0.25)
 def test_imshow_masked_interpolation():
 
     cm = copy(plt.get_cmap('viridis'))
diff --git a/lib/matplotlib/tests/test_mathtext.py b/lib/matplotlib/tests/test_mathtext.py
index cdc1093e1..ac0d8bf05 100644
--- a/lib/matplotlib/tests/test_mathtext.py
+++ b/lib/matplotlib/tests/test_mathtext.py
@@ -173,7 +173,7 @@ def baseline_images(request, fontset, index):
                          ['cm', 'stix', 'stixsans', 'dejavusans',
                           'dejavuserif'])
 @pytest.mark.parametrize('baseline_images', ['mathtext'], indirect=True)
-@image_comparison(baseline_images=None)
+@image_comparison(baseline_images=None, tol=0.31)
 def test_mathtext_rendering(baseline_images, fontset, index, test):
     matplotlib.rcParams['mathtext.fontset'] = fontset
     fig = plt.figure(figsize=(5.25, 0.75))
@@ -187,7 +187,7 @@ def test_mathtext_rendering(baseline_images, fontset, index, test):
                          ['cm', 'stix', 'stixsans', 'dejavusans',
                           'dejavuserif'])
 @pytest.mark.parametrize('baseline_images', ['mathfont'], indirect=True)
-@image_comparison(baseline_images=None, extensions=['png'])
+@image_comparison(baseline_images=None, extensions=['png'], tol=0.3)
 def test_mathfont_rendering(baseline_images, fontset, index, test):
     matplotlib.rcParams['mathtext.fontset'] = fontset
     fig = plt.figure(figsize=(5.25, 0.75))
diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py
index ff1abb9c6..cc90e6bb0 100644
--- a/lib/matplotlib/tests/test_patches.py
+++ b/lib/matplotlib/tests/test_patches.py
@@ -266,9 +266,8 @@ def test_wedge_movement():
         assert getattr(w, attr) == new_v
 
 
-# png needs tol>=0.06, pdf tol>=1.617
 @image_comparison(baseline_images=['wedge_range'],
-                  remove_text=True, tol=1.65 if on_win else 0)
+                  remove_text=True)
 def test_wedge_range():
     ax = plt.axes()
 
diff --git a/lib/matplotlib/tests/test_patheffects.py b/lib/matplotlib/tests/test_patheffects.py
index fe7265957..2addc35ed 100644
--- a/lib/matplotlib/tests/test_patheffects.py
+++ b/lib/matplotlib/tests/test_patheffects.py
@@ -121,7 +121,7 @@ def test_SimplePatchShadow_offset():
     assert pe._offset == (4, 5)
 
 
-@image_comparison(baseline_images=['collection'], tol=0.02)
+@image_comparison(baseline_images=['collection'], tol=0.084)
 def test_collection():
     x, y = np.meshgrid(np.linspace(0, 10, 150), np.linspace(-5, 5, 100))
     data = np.sin(x) + np.cos(y)
diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py
index 89a5a512e..a25961284 100644
--- a/lib/matplotlib/tests/test_pickle.py
+++ b/lib/matplotlib/tests/test_pickle.py
@@ -42,7 +42,7 @@ def test_simple():
 
 @image_comparison(baseline_images=['multi_pickle'],
                   extensions=['png'], remove_text=True,
-                  style='mpl20')
+                  style='mpl20', tol=0.11)
 def test_complete():
     fig = plt.figure('Figure with a label?', figsize=(10, 6))
 
diff --git a/lib/matplotlib/tests/test_quiver.py b/lib/matplotlib/tests/test_quiver.py
index a0e1e674f..ede6bfc64 100644
--- a/lib/matplotlib/tests/test_quiver.py
+++ b/lib/matplotlib/tests/test_quiver.py
@@ -131,7 +131,7 @@ def test_quiver_key_pivot():
 
 
 @image_comparison(baseline_images=['barbs_test_image'],
-                  extensions=['png'], remove_text=True)
+                  extensions=['png'], remove_text=True, tol=0.11)
 def test_barbs():
     x = np.linspace(-5, 5, 5)
     X, Y = np.meshgrid(x, x)
diff --git a/lib/matplotlib/tests/test_streamplot.py b/lib/matplotlib/tests/test_streamplot.py
index 4f70ce861..5bc8184f7 100644
--- a/lib/matplotlib/tests/test_streamplot.py
+++ b/lib/matplotlib/tests/test_streamplot.py
@@ -39,8 +39,7 @@ def test_startpoints():
     plt.plot(start_x, start_y, 'ok')
 
 
-@image_comparison(baseline_images=['streamplot_colormap'],
-                  tol=.02)
+@image_comparison(baseline_images=['streamplot_colormap'])
 def test_colormap():
     X, Y, U, V = velocity_field()
     plt.streamplot(X, Y, U, V, color=U, density=0.6, linewidth=2,
diff --git a/lib/matplotlib/tests/test_transforms.py b/lib/matplotlib/tests/test_transforms.py
index 06985db84..8efaef898 100644
--- a/lib/matplotlib/tests/test_transforms.py
+++ b/lib/matplotlib/tests/test_transforms.py
@@ -74,7 +74,7 @@ def test_external_transform_api():
 
 
 @image_comparison(baseline_images=['pre_transform_data'],
-                  tol=0.08)
+                  tol=0.155)
 def test_pre_transform_plotting():
     # a catch-all for as many as possible plot layouts which handle
     # pre-transforming the data NOTE: The axis range is important in this
diff --git a/lib/mpl_toolkits/tests/test_axisartist_floating_axes.py b/lib/mpl_toolkits/tests/test_axisartist_floating_axes.py
index de7226609..af2283541 100644
--- a/lib/mpl_toolkits/tests/test_axisartist_floating_axes.py
+++ b/lib/mpl_toolkits/tests/test_axisartist_floating_axes.py
@@ -24,7 +24,7 @@ def test_subplot():
 
 
 @image_comparison(baseline_images=['curvelinear3'],
-                  extensions=['png'], style='default', tol=0.01)
+                  extensions=['png'], style='default', tol=0.02)
 def test_curvelinear3():
     fig = plt.figure(figsize=(5, 5))
     fig.clf()
@@ -80,7 +80,7 @@ def test_curvelinear3():
 
 
 @image_comparison(baseline_images=['curvelinear4'],
-                  extensions=['png'], style='default', tol=0.01)
+                  extensions=['png'], style='default', tol=0.05)
 def test_curvelinear4():
     fig = plt.figure(figsize=(5, 5))
     fig.clf()
diff --git a/lib/mpl_toolkits/tests/test_axisartist_grid_helper_curvelinear.py b/lib/mpl_toolkits/tests/test_axisartist_grid_helper_curvelinear.py
index a7c637428..61d41d354 100644
--- a/lib/mpl_toolkits/tests/test_axisartist_grid_helper_curvelinear.py
+++ b/lib/mpl_toolkits/tests/test_axisartist_grid_helper_curvelinear.py
@@ -91,7 +91,7 @@ def test_custom_transform():
 
 
 @image_comparison(baseline_images=['polar_box'],
-                  extensions=['png'], style='default', tol=0.03)
+                  extensions=['png'], style='default', tol=0.08)
 def test_polar_box():
     fig = plt.figure(figsize=(5, 5))
 
@@ -152,7 +152,7 @@ def test_polar_box():
 
 
 @image_comparison(baseline_images=['axis_direction'],
-                  extensions=['png'], style='default', tol=0.03)
+                  extensions=['png'], style='default', tol=0.05)
 def test_axis_direction():
     fig = plt.figure(figsize=(5, 5))
 
diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py
index 0a506db92..44e1681fc 100644
--- a/lib/mpl_toolkits/tests/test_mplot3d.py
+++ b/lib/mpl_toolkits/tests/test_mplot3d.py
@@ -225,7 +225,7 @@ def test_text3d():
     ax.set_zlabel('Z axis')
 
 
-@image_comparison(baseline_images=['trisurf3d'], remove_text=True, tol=0.03)
+@image_comparison(baseline_images=['trisurf3d'], remove_text=True, tol=0.05)
 def test_trisurf3d():
     n_angles = 36
     n_radii = 8
@@ -704,7 +704,7 @@ class TestVoxels(object):
     @image_comparison(
         baseline_images=['voxels-xyz'],
         extensions=['png'],
-        tol=0.01
+        tol=0.02
     )
     def test_xyz(self):
         fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
-- 
2.14.3

