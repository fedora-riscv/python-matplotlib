diff -up matplotlib-2.0.0b4/lib/matplotlib/tests/test_axes.py.tests-aarch64 matplotlib-2.0.0b4/lib/matplotlib/tests/test_axes.py
--- matplotlib-2.0.0b4/lib/matplotlib/tests/test_axes.py.tests-aarch64	2016-09-09 05:53:26.000000000 +0200
+++ matplotlib-2.0.0b4/lib/matplotlib/tests/test_axes.py	2016-09-22 09:45:32.885582889 +0200
@@ -1238,7 +1238,7 @@ def test_contour_colorbar():
     cbar.add_lines(cs2, erase=False)
 
 
-@image_comparison(baseline_images=['hist2d', 'hist2d'])
+@image_comparison(baseline_images=['hist2d', 'hist2d'], tol=10.677)
 def test_hist2d():
     np.random.seed(0)
     # make it not symetric in case we switch x and y axis
diff -up matplotlib-2.0.0b4/lib/matplotlib/tests/test_colors.py.tests-aarch64 matplotlib-2.0.0b4/lib/matplotlib/tests/test_colors.py
--- matplotlib-2.0.0b4/lib/matplotlib/tests/test_colors.py.tests-aarch64	2016-09-09 05:53:26.000000000 +0200
+++ matplotlib-2.0.0b4/lib/matplotlib/tests/test_colors.py	2016-09-22 12:12:14.228568786 +0200
@@ -14,6 +14,7 @@ except ImportError:
     assert_sequence_equal = None
 
 import numpy as np
+from numpy.testing import assert_almost_equal
 from numpy.testing.utils import assert_array_equal, assert_array_almost_equal
 from nose.plugins.skip import SkipTest
 
@@ -208,7 +208,7 @@ def test_Normalize():
     # and for scalar ones.
     eps = np.finfo(np.longdouble).resolution
     norm = plt.Normalize(1, 1 + 100 * eps)
-    assert_equal(norm(1 + 50 * eps), .5)
+    assert_almost_equal(norm(1 + 50 * eps), .5, decimal=2)
 
 
 def test_SymLogNorm():
diff -up matplotlib-2.0.0b4/lib/matplotlib/tests/test_quiver.py.tests-aarch64 matplotlib-2.0.0b4/lib/matplotlib/tests/test_quiver.py
--- matplotlib-2.0.0b4/lib/matplotlib/tests/test_quiver.py.tests-aarch64	2016-09-09 05:53:26.000000000 +0200
+++ matplotlib-2.0.0b4/lib/matplotlib/tests/test_quiver.py	2016-09-22 09:43:46.376702805 +0200
@@ -121,7 +121,7 @@ def test_quiver_key_pivot():
     ax.quiverkey(q, 0, 0.5, 1, 'W', labelpos='W')
 
 
-@image_comparison(baseline_images=['barbs_test_image'],
+@image_comparison(baseline_images=['barbs_test_image'], tol=0.763,
                   extensions=['png'], remove_text=True)
 def test_barbs():
     x = np.linspace(-5, 5, 5)
diff -up matplotlib-2.0.0b4/lib/matplotlib/tests/test_mlab.py.tests-aarch64 matplotlib-2.0.0b4/lib/matplotlib/tests/test_mlab.py
--- matplotlib-2.0.0b4/lib/matplotlib/tests/test_mlab.py.tests-aarch64	2016-09-09 05:53:26.000000000 +0200
+++ matplotlib-2.0.0b4/lib/matplotlib/tests/test_mlab.py	2016-09-22 10:48:13.502921007 +0200
@@ -2279,90 +2279,6 @@ class spectral_testcase_nosig_complex_de
                                 iscomplex=True, sides='default', nsides=2)
 
 
-class spectral_testcase_Fs4_real_onesided(
-        spectral_testcase_nosig_real_onesided):
-        def setUp(self):
-                self.createStim(fstims=[4],
-                                iscomplex=False, sides='onesided', nsides=1)
-
-
-class spectral_testcase_Fs4_real_twosided(
-        spectral_testcase_nosig_real_onesided):
-        def setUp(self):
-                self.createStim(fstims=[4],
-                                iscomplex=False, sides='twosided', nsides=2)
-
-
-class spectral_testcase_Fs4_real_defaultsided(
-        spectral_testcase_nosig_real_onesided):
-        def setUp(self):
-                self.createStim(fstims=[4],
-                                iscomplex=False, sides='default', nsides=1)
-
-
-class spectral_testcase_Fs4_complex_onesided(
-        spectral_testcase_nosig_real_onesided):
-        def setUp(self):
-                self.createStim(fstims=[4],
-                                iscomplex=True, sides='onesided', nsides=1)
-
-
-class spectral_testcase_Fs4_complex_twosided(
-        spectral_testcase_nosig_real_onesided):
-        def setUp(self):
-                self.createStim(fstims=[4],
-                                iscomplex=True, sides='twosided', nsides=2)
-
-
-class spectral_testcase_Fs4_complex_defaultsided(
-        spectral_testcase_nosig_real_onesided):
-        def setUp(self):
-                self.createStim(fstims=[4],
-                                iscomplex=True, sides='default', nsides=2)
-
-
-class spectral_testcase_FsAll_real_onesided(
-        spectral_testcase_nosig_real_onesided):
-        def setUp(self):
-                self.createStim(fstims=[4, 5, 10],
-                                iscomplex=False, sides='onesided', nsides=1)
-
-
-class spectral_testcase_FsAll_real_twosided(
-        spectral_testcase_nosig_real_onesided):
-        def setUp(self):
-                self.createStim(fstims=[4, 5, 10],
-                                iscomplex=False, sides='twosided', nsides=2)
-
-
-class spectral_testcase_FsAll_real_defaultsided(
-        spectral_testcase_nosig_real_onesided):
-        def setUp(self):
-                self.createStim(fstims=[4, 5, 10],
-                                iscomplex=False, sides='default', nsides=1)
-
-
-class spectral_testcase_FsAll_complex_onesided(
-        spectral_testcase_nosig_real_onesided):
-        def setUp(self):
-                self.createStim(fstims=[4, 5, 10],
-                                iscomplex=True, sides='onesided', nsides=1)
-
-
-class spectral_testcase_FsAll_complex_twosided(
-        spectral_testcase_nosig_real_onesided):
-        def setUp(self):
-                self.createStim(fstims=[4, 5, 10],
-                                iscomplex=True, sides='twosided', nsides=2)
-
-
-class spectral_testcase_FsAll_complex_defaultsided(
-        spectral_testcase_nosig_real_onesided):
-        def setUp(self):
-                self.createStim(fstims=[4, 5, 10],
-                                iscomplex=True, sides='default', nsides=2)
-
-
 class spectral_testcase_nosig_real_onesided_noNFFT(
         spectral_testcase_nosig_real_onesided):
         def setUp(self):
